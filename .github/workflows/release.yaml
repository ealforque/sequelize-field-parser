name: Sequelize Field Parser Package CI/CID Pipeline

on:
  push:
    branches: ["**"]
    tags: ["v*.*.*"]

jobs:
  build-and-release:
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SETTING_UP_NODE_JS_STATUS: "ðŸš€ Executing.."
      INSTALLING_DEPENDENCIES_STATUS: "ðŸ“Œ Not Executed"
      LINTING_CODEBASE_STATUS: "ðŸ“Œ Not Executed"
      EXECUTING_JEST_STATUS: "ðŸ“Œ Not Executed"
      BUILDING_CODEBASE_STATUS: "ðŸ“Œ Not Executed"
      CREATING_GITHUB_RELEASE: "ðŸ“Œ Not Executed"
    runs-on: ubuntu-latest

    steps:
      - name: Initializing CICD Pipeline
        uses: actions/checkout@v4

      - name: Start pipeline
        id: cicd-pipeline-notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "blocks": [
                { "type": "section", "text": { "type": "plain_text", "emoji": true, "text": "Sequelize Field Parser Package CI/CID Pipeline" }},
                { "type": "divider" },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit*: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.event.head_commit.message }}>\n*Branch*: ${{ github.ref_name }}\n*Trigger Event*: ${{ github.event_name }}\n*Triggered By*: ${{ github.actor }}"
                  },
                  "accessory": { "type": "image", "image_url": "https://img.icons8.com/?size=100&id=wh2djijxoGnG&format=png&color=000000", "alt_text": "deployment" }
                },
                { "type": "divider" },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Setting up Nodejs*\nDownloading and caching Node.js and adding it to the PATH" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.SETTING_UP_NODE_JS_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Installing Dependencies*\nExecuting a clean install of dependencies from package lock file" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.INSTALLING_DEPENDENCIES_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Executing ESLint*\nRunning ESLint and capturing its output summary" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.LINTING_CODEBASE_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Executing Jest*\nExecuting test cases and capturing Jest output summary" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.EXECUTING_JEST_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Building Codebase*\nCompiling TypeScript and adding static assets to the build" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.BUILDING_CODEBASE_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Release*\nCreating GitHub Release" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.CREATING_GITHUB_RELEASE }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { "type": "divider" }
              ]
            }

      - name: Setting up Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Mark Setting up Nodejs Success
        if: success()
        run: echo "SETTING_UP_NODE_JS_STATUS=ðŸŽ‰ Success" >> $GITHUB_ENV && echo "INSTALLING_DEPENDENCIES_STATUS=ðŸš€ Executing.." >> $GITHUB_ENV

      - name: Mark Setting up Nodejs Failure
        if: failure()
        run: echo "SETTING_UP_NODE_JS_STATUS=ðŸš« Failed" >> $GITHUB_ENV

      - name: Update notification
        if: always()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.cicd-pipeline-notification.outputs.ts }}
          payload: |
            {
              "blocks": [
                { "type": "section", "text": { "type": "plain_text", "emoji": true, "text": "Sequelize Field Parser Package CI/CID Pipeline" }},
                { "type": "divider" },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit*: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.event.head_commit.message }}>\n*Branch*: ${{ github.ref_name }}\n*Trigger Event*: ${{ github.event_name }}\n*Triggered By*: ${{ github.actor }}"
                  },
                  "accessory": { "type": "image", "image_url": "https://img.icons8.com/?size=100&id=wh2djijxoGnG&format=png&color=000000", "alt_text": "deployment" }
                },
                { "type": "divider" },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Setting up Nodejs*\nDownloading and caching Node.js and adding it to the PATH" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.SETTING_UP_NODE_JS_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Installing Dependencies*\nExecuting a clean install from package lock file" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.INSTALLING_DEPENDENCIES_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Executing ESLint*\nRunning ESLint and capturing its output summary" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.LINTING_CODEBASE_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Executing Jest*\nExecuting test cases and capturing Jest output summary" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.EXECUTING_JEST_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Building Codebase*\nCompiling TypeScript and adding static assets to the build" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.BUILDING_CODEBASE_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Release*\nCreating GitHub Release" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.CREATING_GITHUB_RELEASE }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { "type": "divider" }
              ]
            }

      - name: Installing dependencies
        run: npm ci

      - name: Mark Installing dependencies Success
        if: success()
        run: echo "INSTALLING_DEPENDENCIES_STATUS=ðŸŽ‰ Success" >> $GITHUB_ENV && echo "LINTING_CODEBASE_STATUS=ðŸš€ Executing.." >> $GITHUB_ENV

      - name: Mark Installing dependencies Failure
        if: failure()
        run: echo "INSTALLING_DEPENDENCIES_STATUS=ðŸš« Failed" >> $GITHUB_ENV

      - name: Update notification
        if: always()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.cicd-pipeline-notification.outputs.ts }}
          payload: |
            {
              "blocks": [
                { "type": "section", "text": { "type": "plain_text", "emoji": true, "text": "Sequelize Field Parser Package CI/CID Pipeline" }},
                { "type": "divider" },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit*: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.event.head_commit.message }}>\n*Branch*: ${{ github.ref_name }}\n*Trigger Event*: ${{ github.event_name }}\n*Triggered By*: ${{ github.actor }}"
                  },
                  "accessory": { "type": "image", "image_url": "https://img.icons8.com/?size=100&id=wh2djijxoGnG&format=png&color=000000", "alt_text": "deployment" }
                },
                { "type": "divider" },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Setting up Nodejs*\nDownloading and caching Node.js and adding it to the PATH" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.SETTING_UP_NODE_JS_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Installing Dependencies*\nExecuting a clean install of dependencies from package lock file" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.INSTALLING_DEPENDENCIES_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Executing ESLint*\nRunning ESLint and capturing its output summary" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.LINTING_CODEBASE_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Executing Jest*\nExecuting test cases and capturing Jest output summary" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.EXECUTING_JEST_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Building Codebase*\nCompiling TypeScript and adding static assets to the build" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.BUILDING_CODEBASE_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Release*\nCreating GitHub Release" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.CREATING_GITHUB_RELEASE }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { "type": "divider" }
              ]
            }

      - name: Linting codebase
        run: |
          npm run lint > lint-output.txt
          echo "### ESLint Summary" >> $GITHUB_STEP_SUMMARY
          cat lint-output.txt | head -n 20 >> $GITHUB_STEP_SUMMARY

      - name: Mark Linting codebase Success
        if: success()
        run: echo "LINTING_CODEBASE_STATUS=ðŸŽ‰ Success" >> $GITHUB_ENV && echo "BUILDING_CODEBASE_STATUS=ðŸš€ Executing.." >> $GITHUB_ENV

      - name: Mark Linting codebase Failure
        if: failure()
        run: echo "LINTING_CODEBASE_STATUS=ðŸš« Failed" >> $GITHUB_ENV

      - name: Update notification
        if: always()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.cicd-pipeline-notification.outputs.ts }}
          payload: |
            {
              "blocks": [
                { "type": "section", "text": { "type": "plain_text", "emoji": true, "text": "Sequelize Field Parser Package CI/CID Pipeline" }},
                { "type": "divider" },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit*: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.event.head_commit.message }}>\n*Branch*: ${{ github.ref_name }}\n*Trigger Event*: ${{ github.event_name }}\n*Triggered By*: ${{ github.actor }}"
                  },
                  "accessory": { "type": "image", "image_url": "https://img.icons8.com/?size=100&id=wh2djijxoGnG&format=png&color=000000", "alt_text": "deployment" }
                },
                { "type": "divider" },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Setting up Nodejs*\nDownloading and caching Node.js and adding it to the PATH" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.SETTING_UP_NODE_JS_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Installing Dependencies*\nExecuting a clean install of dependencies from package lock file" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.INSTALLING_DEPENDENCIES_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Executing ESLint*\nRunning ESLint and capturing its output summary" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.LINTING_CODEBASE_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Executing Jest*\nExecuting test cases and capturing Jest output summary" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.EXECUTING_JEST_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Building Codebase*\nCompiling TypeScript and adding static assets to the build" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.BUILDING_CODEBASE_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Release*\nCreating GitHub Release" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.CREATING_GITHUB_RELEASE }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { "type": "divider" }
              ]
            }

      - name: Executing Jest
        run: |
          npm run test > test-output.txt
          echo "### Jest Summary" >> $GITHUB_STEP_SUMMARY
          cat test-output.txt | head -n 20 >> $GITHUB_STEP_SUMMARY

      - name: Mark Executing Jest Success
        if: success()
        run: echo "EXECUTING_JEST_STATUS=ðŸŽ‰ Success" >> $GITHUB_ENV

      - name: Mark Executing Jest Failure
        if: failure()
        run: echo "EXECUTING_JEST_STATUS=ðŸš« Failed" >> $GITHUB_ENV

      - name: Update notification
        if: always()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.cicd-pipeline-notification.outputs.ts }}
          payload: |
            {
              "blocks": [
                { "type": "section", "text": { "type": "plain_text", "emoji": true, "text": "Auth Service API CI/CD Pipeline" }},
                { "type": "divider" },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit*: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.event.head_commit.message }}>\n*Branch*: ${{ github.ref_name }}\n*Trigger Event*: ${{ github.event_name }}\n*Triggered By*: ${{ github.actor }}"
                  },
                  "accessory": { "type": "image", "image_url": "https://img.icons8.com/?size=100&id=wh2djijxoGnG&format=png&color=000000", "alt_text": "deployment" }
                },
                { "type": "divider" },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Setting up Nodejs*\nDownloading and caching Node.js and adding it to the PATH" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.SETTING_UP_NODE_JS_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Installing Dependencies*\nExecuting a clean install of dependencies from package lock file" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.INSTALLING_DEPENDENCIES_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Executing ESLint*\nRunning ESLint and capturing its output summary" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.LINTING_CODEBASE_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Executing Jest*\nExecuting test cases and capturing Jest output summary" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.EXECUTING_JEST_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Building Codebase*\nCompiling TypeScript and adding static assets to the build" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.BUILDING_CODEBASE_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Release*\nCreating GitHub Release" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.CREATING_GITHUB_RELEASE }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { "type": "divider" }
              ]
            }

      - name: Building codebase
        run: | 
          npm run build --workspace=packages/sequelize-field-parser
          npm pack --workspace=packages/sequelize-field-parser

      - name: Mark Building codebase Success
        if: success()
        run: echo "BUILDING_CODEBASE_STATUS=ðŸŽ‰ Success" >> $GITHUB_ENV && echo "EXECUTING_JEST_STATUS=ðŸš€ Executing.." >> $GITHUB_ENV

      - name: Mark Building codebase Failure
        if: failure()
        run: echo "BUILDING_CODEBASE_STATUS=ðŸš« Failed" >> $GITHUB_ENV

      - name: Mark Creating GitHub release Executing
        if: success() && startsWith(github.ref, 'refs/tags/')
        run: echo "CREATING_GITHUB_RELEASE=ðŸš€ Executing.." >> $GITHUB_ENV

      - name: Update notification
        if: always()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.cicd-pipeline-notification.outputs.ts }}
          payload: |
            {
              "blocks": [
                { "type": "section", "text": { "type": "plain_text", "emoji": true, "text": "Sequelize Field Parser Package CI/CID Pipeline" }},
                { "type": "divider" },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit*: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.event.head_commit.message }}>\n*Branch*: ${{ github.ref_name }}\n*Trigger Event*: ${{ github.event_name }}\n*Triggered By*: ${{ github.actor }}"
                  },
                  "accessory": { "type": "image", "image_url": "https://img.icons8.com/?size=100&id=wh2djijxoGnG&format=png&color=000000", "alt_text": "deployment" }
                },
                { "type": "divider" },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Setting up Nodejs*\nDownloading and caching Node.js and adding it to the PATH" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.SETTING_UP_NODE_JS_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Installing Dependencies*\nExecuting a clean install of dependencies from package lock file" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.INSTALLING_DEPENDENCIES_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Executing ESLint*\nRunning ESLint and capturing its output summary" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.LINTING_CODEBASE_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Executing Jest*\nExecuting test cases and capturing Jest output summary" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.EXECUTING_JEST_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Building Codebase*\nCompiling TypeScript and adding static assets to the build" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.BUILDING_CODEBASE_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Release*\nCreating GitHub Release" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.CREATING_GITHUB_RELEASE }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { "type": "divider" }
              ]
            }

      - name: Creating GitHub release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            sequelize-field-parser-*.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PACKAGE_RELEASE_TOKEN }}

      - name: Mark Creating GitHub release Success
        if: success() && startsWith(github.ref, 'refs/tags/')
        run: echo "CREATING_GITHUB_RELEASE=ðŸŽ‰ Success" >> $GITHUB_ENV

      - name: Mark Creating GitHub release Failure
        if: failure() && startsWith(github.ref, 'refs/tags/')
        run: echo "CREATING_GITHUB_RELEASE=ðŸš« Failed" >> $GITHUB_ENV

      - name: Update notification
        if: always() && startsWith(github.ref, 'refs/tags/')
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.cicd-pipeline-notification.outputs.ts }}
          payload: |
            {
              "blocks": [
                { "type": "section", "text": { "type": "plain_text", "emoji": true, "text": "Sequelize Field Parser Package CI/CID Pipeline" }},
                { "type": "divider" },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit*: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.event.head_commit.message }}>\n*Branch*: ${{ github.ref_name }}\n*Trigger Event*: ${{ github.event_name }}\n*Triggered By*: ${{ github.actor }}"
                  },
                  "accessory": { "type": "image", "image_url": "https://img.icons8.com/?size=100&id=wh2djijxoGnG&format=png&color=000000", "alt_text": "deployment" }
                },
                { "type": "divider" },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Setting up Nodejs*\nDownloading and caching Node.js and adding it to the PATH" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.SETTING_UP_NODE_JS_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Installing Dependencies*\nExecuting a clean install of dependencies from package lock file" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.INSTALLING_DEPENDENCIES_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Executing ESLint*\nRunning ESLint and capturing its output summary" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.LINTING_CODEBASE_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Executing Jest*\nExecuting test cases and capturing Jest output summary" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.EXECUTING_JEST_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Building Codebase*\nCompiling TypeScript and adding static assets to the build" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.BUILDING_CODEBASE_STATUS }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { 
                  "type": "section", "text": { "type": "mrkdwn", "text": "*Release*\nCreating GitHub Release" },
                  "accessory": { "type": "button", "text": { "type": "plain_text", "emoji": true, "text": "${{ env.CREATING_GITHUB_RELEASE }}"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                },
                { "type": "divider" }
              ]
            }
